CLASS zcl_test DEFINITION
  PUBLIC
  FINAL
  CREATE PRIVATE .

  PUBLIC SECTION.
    TYPES: BEGIN OF ty_material_state,
             vbeln     TYPE vbap-vbeln,
             posnr     TYPE vbap-posnr,
             old_matnr TYPE vbap-matnr,
             old_qty   TYPE vbapvb-menge_g,
             new_matnr TYPE vbap-matnr,
             new_qty   TYPE vbapvb-menge_g,
             processed TYPE c LENGTH 1,
           END OF ty_material_state.
    TYPES: tt_material_state TYPE TABLE OF ty_material_state.
    TYPES tt_vbap TYPE TABLE OF vbapvb.
    TYPES: BEGIN OF ty_matnr,
             matnr TYPE matnr,
           END OF ty_matnr.
    TYPES: tt_matnr TYPE TABLE OF ty_matnr.
    TYPES: BEGIN OF ty_alternate_mat,
             matnr TYPE vbapvb-matnr,
             mabnr TYPE rv45a-mabnr,
             menge TYPE vbapvb-menge_g,
             maktx TYPE makt-maktx,
           END OF ty_alternate_mat.
    TYPES: tt_alternate_mat TYPE TABLE OF ty_alternate_mat.
    TYPES: BEGIN OF ty_material_upd_state,
             posnr       TYPE vbap-posnr,
             matnr       TYPE vbap-matnr,
             mat_changed TYPE c LENGTH 1,
           END OF ty_material_upd_state.
    TYPES: BEGIN OF ty_quantity_upd_state,
             posnr       TYPE vbap-posnr,
             menge       TYPE rv45a-kwmeng,
             qty_changed TYPE c LENGTH 1,
           END OF ty_quantity_upd_state.

*    CLASS-DATA: ms_material_upd_state TYPE ty_material_upd_state,
*                ms_quantity_upd_state TYPE ty_quantity_upd_state.

    CLASS-METHODS get_instance
      RETURNING
        VALUE(ro_self) TYPE REF TO zcl_test .

    METHODS: is_mat_out_of_stock IMPORTING is_vbap TYPE vbapvb RETURNING VALUE(rv_out_of_stock) TYPE xfld,
      check_and_popup_alt_mat CHANGING cs_vbap  TYPE vbapvb
                                       ct_vbap  TYPE tt_vbap OPTIONAL
                                       cs_vbep  TYPE vbep
                                       cs_rv45a TYPE rv45a,
      display_alternate_mat CHANGING cs_vbap  TYPE vbapvb
                                     cs_rv45a TYPE rv45a
                                     cs_vbep  TYPE vbep
                                     ct_vbap  TYPE tt_vbap.
*      is_material_processed IMPORTING is_vbap TYPE vbapvb RETURNING VALUE(rv_is_mat_processed) TYPE xfld,
*      update_material_state CHANGING cs_vbap TYPE vbapvb ct_vbap TYPE tt_vbap OPTIONAL.

  PROTECTED SECTION.
  PRIVATE SECTION.
    DATA: mt_alt_matnr      TYPE TABLE OF ty_alternate_mat.
*          mt_material_state TYPE TABLE OF ty_material_state.
    METHODS: fetch_alternate_mat,
      update_material IMPORTING is_selfield TYPE slis_selfield
                      CHANGING  cs_vbap     TYPE vbapvb
                                cs_rv45a    TYPE rv45a
                                cs_vbep     TYPE vbep
                                ct_vbap     TYPE tt_vbap.
    CLASS-DATA mo_self TYPE REF TO zcl_test.
ENDCLASS.



CLASS ZCL_TEST IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_TEST->CHECK_AND_POPUP_ALT_MAT
* +-------------------------------------------------------------------------------------------------+
* | [<-->] CS_VBAP                        TYPE        VBAPVB
* | [<-->] CT_VBAP                        TYPE        TT_VBAP(optional)
* | [<-->] CS_VBEP                        TYPE        VBEP
* | [<-->] CS_RV45A                       TYPE        RV45A
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD check_and_popup_alt_mat.
    "Add logic to check materials & save the state in buffer
*    IF ms_material_upd_state-mat_changed = abap_true OR
*       ms_quantity_upd_state-qty_changed = abap_true.
*      IF abap_true = is_mat_out_of_stock( is_vbap = cs_vbap ).
    IF cs_vbep-wmeng > 0 AND
       cs_rv45a-mabnr IS NOT INITIAL.
      display_alternate_mat( CHANGING cs_vbap = cs_vbap
                                      cs_vbep = cs_vbep
                                     cs_rv45a = cs_rv45a
                                      ct_vbap = ct_vbap ).
    ENDIF.
*      CLEAR:ms_material_upd_state,
*            ms_quantity_upd_state.
*    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_TEST->DISPLAY_ALTERNATE_MAT
* +-------------------------------------------------------------------------------------------------+
* | [<-->] CS_VBAP                        TYPE        VBAPVB
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD display_alternate_mat.

    DATA: ls_selfield TYPE slis_selfield.

    IF mt_alt_matnr IS INITIAL.
      fetch_alternate_mat( ).
    ENDIF.

*    mt_alt_matnr = VALUE #( ( matnr = 1 ) ( matnr = 2 ) ( matnr = 3 ) ( matnr = 4 ) ( matnr = 5 ) ).

    CALL FUNCTION 'REUSE_ALV_POPUP_TO_SELECT'
      EXPORTING
        i_title               = 'Select alternate Material'                 " Dialog box title
        i_selection           = 'X'              " (X) = Selection possible, ( ) = Display
        i_screen_start_column = 10                " Coordinates for list in dialog box
        i_screen_start_line   = 20                " Coordinates for list in dialog box
        i_screen_end_column   = 50                " Coordinates for list in dialog box
        i_screen_end_line     = 40                " Coordinates for list in dialog box
        i_tabname             = 'MT_ALT_MATNR'                 " Table name with chosen values
        it_fieldcat           = VALUE slis_t_fieldcat_alv( ( fieldname = 'MATNR'
                                                             col_pos = 1
                                                             seltext_l = 'Material'
                                                             outputlen = 18 )
                                                             ( fieldname = 'MABNR'
                                                             col_pos = 2
                                                             seltext_l = 'Material'
                                                             outputlen = 18 )
                                                             ( fieldname = 'MENGE'
                                                             col_pos = 3
                                                             seltext_l = 'Quantity'
                                                             outputlen = 6 )
                                                             ( fieldname = 'MAKTX'
                                                             col_pos = 4
                                                             seltext_l = 'Material Description'
                                                             outputlen = 40 ) )
        i_callback_program    = sy-repid                 " Name of the calling program
      IMPORTING
        es_selfield           = ls_selfield                  " Selection info for simple selection
*       e_exit                =                  " 'X' = Cancel by user
      TABLES
        t_outtab              = mt_alt_matnr                  " Selection value table
      EXCEPTIONS
        program_error         = 1                " Program errors
        OTHERS                = 2.
    IF sy-subrc <> 0.
*      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*        WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ELSE.
      IF ls_selfield-tabindex NE 0.
*      cs_vbap-matnr = VALUE #( mt_alt_matnr[ ls_selfield-tabindex ]-matnr optional ).
        update_material( EXPORTING is_selfield = ls_selfield
                          CHANGING     cs_vbap = cs_vbap
                                      cs_rv45a = cs_rv45a
                                       cs_vbep = cs_vbep
                                       ct_vbap = ct_vbap ).
      ENDIF.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_TEST->FETCH_ALTERNATE_MAT
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD fetch_alternate_mat.
*&----Fetch alternate materials from the custom table
*    SELECT matnr
*           mabnr
*           menge
*           maktx
*      FROM zsd_alternate_mat
*      INTO TABLE mt_alt_mat.
    IF sy-subrc = 0.

    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_TEST=>GET_INSTANCE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RO_SELF                        TYPE REF TO ZCL_TEST
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_instance.

    IF mo_self IS NOT BOUND.
      mo_self = NEW zcl_test( ).
    ENDIF.
    ro_self = mo_self.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_TEST->IS_MAT_OUT_OF_STOCK
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_VBAP                        TYPE        VBAPVB
* | [<-()] RV_OUT_OF_STOCK                TYPE        XFLD
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD is_mat_out_of_stock.

*    call FUNCTION 'BAPI_MATERIAL_AVAILABILITY'
*      EXPORTING
*        plant              = is_vbap-werks                 " Plant
**        material            =                  " Material number
*        unit               = is_vbap-vrkme                  " Unit of measure for display
**        check_rule         =                  " Checking rule
**        stge_loc           =                  " Storage location
**        batch              =                  " Batch
**        customer           =                  " Customer number
**        doc_number         =                  " Document number
**        itm_number         =                  " Item number
**        wbs_elem           =                  " WBS Element
**        stock_ind          =                  " Special Stock Indicator
**        dec_for_rounding   =                  " No. of decimal places to which rounding should be performed
**        dec_for_rounding_x =                  " Updated information in related user data field
**        read_atp_lock      =                  " Control indicator for availability check
**        read_atp_lock_x    =                  " Updated information in related user data field
**        material_evg       =
**        sgt_rcat           =                  " Requirement Segment
**        material_long      =
**      IMPORTING
**        endleadtme         =                  " End of replenishment lead time
**        av_qty_plt         =                  " Quantity available at plant level
**        dialogflag         =                  " Indicator (X = not available, N = no check)
**        return             =
*      TABLES
*        wmdvsx             =                  " Input table (date and quantity)
*        wmdvex             =                  " Output table (date and ATP quantity)
*      .
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_TEST->UPDATE_MATERIAL
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_SELFIELD                    TYPE        SLIS_SELFIELD
* | [<-->] CS_VBAP                        TYPE        VBAPVB
* | [<-->] CS_RV45A                       TYPE        RV45A
* | [<-->] CS_VBRP                        TYPE        CS_VBEP
* | [<-->] CT_VBAP                        TYPE        TT_VBAP
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD update_material.

    DATA(ls_alt_mat) = VALUE ty_alternate_mat( mt_alt_matnr[ is_selfield-tabindex ] OPTIONAL ).

    cs_rv45a-mabnr =
     cs_vbap-matnr = ls_alt_mat-mabnr.

    cs_rv45a-arktx =
     cs_vbap-arktx = ls_alt_mat-maktx.

    cs_rv45a-kwmeng =
     cs_vbap-kwmeng =
      cs_vbep-wmeng = ls_alt_mat-menge.

    DATA(lv_idx) = line_index( ct_vbap[ posnr = cs_vbap-posnr ] ).

    MODIFY ct_vbap INDEX lv_idx FROM cs_vbap .

  ENDMETHOD.
ENDCLASS.
