FIELD-SYMBOLS:
      <fs_asci_tab>   TYPE STANDARD TABLE.

DATA: BEGIN OF ascitab OCCURS 1,
        line(256),
      END OF ascitab.

DATA: lt_knc1tab LIKE rfdkli_knc1_kkber OCCURS 1 WITH HEADER LINE.
DATA: lr_dirtycodes TYPE RANGE OF rstgr,
      wr_dirtycodes LIKE LINE OF lr_dirtycodes.

DATA: lt_itab TYPE TABLE OF ty_aging WITH HEADER LINE VALUE IS INITIAL.

date = sy-datum - 365.

***** GET ENTRIES FROM BSID
SELECT kunnr,
       zuonr,
       belnr,
       zfbdt,
       zbd1t,
       zbd2t,
       gjahr,
       blart,
       bschl,
       shkzg,
       dmbtr,
       pswbt,
       vbeln,
       bldat,
       xblnr,
       sgtxt,
       rebzg,
       rstgr
  FROM bsid
INTO TABLE @DATA(lt_bsid)
     WHERE kunnr IN @kunnr AND
           bukrs IN @bukrs AND
           budat <= @keydate.
IF sy-subrc = 0.

  DATA(lt_tmp) = lt_bsid.
  DELETE lt_tmp WHERE vbeln = space.

  SELECT belnr,
         bschl,
         zfbdt,
         zbd1t,
         zbd2t
    FROM bsid
    INTO TABLE @DATA(lt_bsid1)
    FOR ALL ENTRIES IN @lt_tmp
    WHERE bukrs = 'BP01' AND
          belnr = @lt_tmp-vbeln.
  IF sy-subrc = 0.
    SORT: lt_bsid1 BY belnr.
  ENDIF.
  CLEAR: lt_tmp.
  IF reasoncode <> space.
    SELECT spras,
           bukrs,
           rstgr,
           txt40
      FROM t053s
      INTO TABLE @DATA(lt_t053s)
      FOR ALL ENTRIES IN @lt_bsid
       WHERE spras = @sy-langu
         AND bukrs = 'BP01'
         AND rstgr = @lt_bsid-rstgr.
    IF sy-subrc = 0.
      SORT: lt_t053s BY rstgr.
    ENDIF.
  ENDIF.

  LOOP AT lt_bsid INTO DATA(ls_bsid).

    itab-kunnr = ls_bsid-kunnr.
    itab-zuonr = ls_bsid-zuonr.
    itab-belnr = ls_bsid-belnr.
    itab-jobnumb = COND #( WHEN ls_bsid-xblnr+0(1) = '5' THEN '000' && ls_bsid-xblnr ).

    IF ls_bsid-belnr BETWEEN '0095000000' AND
                             '0095999999' AND
                     ls_bsid-bschl = '11'.
      itab-budat = ls_bsid-zfbdt.
    ELSE.
      " Discount Days
      IF bsid-zbd2t IS NOT INITIAL.
        itab-budat = ls_bsid-zfbdt + ls_bsid-zbd2t.
      ELSE.
        itab-budat = ls_bsid-zfbdt + ls_bsid-zbd1t.
      ENDIF.
    ENDIF.

    IF reasoncode <> space.
      itab-rstgr = ls_bsid-rstgr.
      READ TABLE lt_t053s INTO DATA(ls_t053s)
                          WITH KEY rstgr = ls_bsid-rstgr
                          BINARY SEARCH.
      IF sy-subrc = 0.
        itab-txt40 = ls_t053s-txt40.
      ENDIF.
    ENDIF.
    READ TABLE lt_bsid1 INTO DATA(ls_bsid1)
                        WITH KEY belnr = ls_bsid-vbeln
                        BINARY SEARCH.
    IF sy-subrc = 0.
      IF ls_bsid-vbeln BETWEEN '0095000000' AND
                               '0095999999' AND
                       ls_bsid-bschl = '11'.
        itab-budat = ls_bsid1-zfbdt.
      ELSE.
        " Discount Days
        IF ls_bsid-zbd2t IS NOT INITIAL.
          itab-budat = ls_bsid1-zfbdt + ls_bsid1-zbd2t.
        ELSE.
          itab-budat = ls_bsid1-zfbdt + ls_bsid1-zbd1t.
        ENDIF.
      ENDIF.
    ENDIF.

    itab-days = ( itab-budat - keydate ) * -1.
    IF itab-shkzg = 'H'.
      itab-dmbtr = ( itab-dmbtr * -1 ).
      itab-pswbt = ( itab-pswbt * -1 ).
    ENDIF.

    IF itab-belnr+0(4) EQ '0018'.
      DATA(ls_itab) = itab.
      ls_itab-vbeln = itab-belnr.
      APPEND ls_itab TO lt_itab.
      CLEAR: ls_itab.
    ENDIF.

    APPEND itab.

    CLEAR: itab,
           ls_bsid,
           ls_bsid1,
           ls_t053s.
  ENDLOOP.
ENDIF.

SELECT name,
       sign,
       opti,
       low,
       high
 FROM tvarvc INTO TABLE @DATA(lt_dirty_clean_codes)
WHERE ( name = 'Z_AR_DIRTY_REASONCODES' OR
        name = 'Z_AR_CLEAN_REASONCODES' ) AND
        type = 'S'.
IF sy-subrc = 0.
  SORT lt_dirty_clean_codes BY name low.
ENDIF.

SORT: itab[] BY kunnr belnr rebzg.

CASE reasoncode.
  WHEN 'Y'.
    PERFORM reasoncode_y.
  WHEN 'X'.
    PERFORM reasoncode_x.
ENDCASE.

SORT itab[].

CLEAR: itab.

***** GET ENTRIES FROM BSAD
SELECT kunnr,
       zuonr,
       belnr,
       zfbdt,
       zbd1t,
       zbd2t,
       gjahr,
       blart,
       bschl,
       shkzg,
       dmbtr,
       pswbt,
       vbeln,
       bldat,
       xblnr,
       sgtxt
    FROM bsad
    INTO TABLE @DATA(lt_bsad)
       WHERE kunnr IN @kunnr AND
             bukrs IN @bukrs AND
             augdt > @keydate AND
             budat <= @keydate.
IF sy-subrc = 0.

  DATA(lt_dummy) = lt_bsad.

  DELETE lt_dummy WHERE vbeln IS INITIAL.

  SELECT belnr,
         bschl,
         zfbdt,
         zbd1t,
         zbd2t
     FROM bsad
     INTO TABLE @DATA(lt_bsad1)
    FOR ALL ENTRIES IN @lt_dummy
    WHERE bukrs IN @bukrs AND
          belnr = @lt_dummy-vbeln.
  IF sy-subrc = 0.
    SORT: lt_bsad1 BY belnr.
  ENDIF.

  LOOP AT lt_bsad INTO DATA(ls_bsad).

    itab = VALUE #(
                     kunnr = ls_bsad-kunnr
                     zuonr = ls_bsad-zuonr
                     belnr = ls_bsad-belnr
                     gjahr = ls_bsad-gjahr
                     blart = ls_bsad-blart
                     bschl = ls_bsad-bschl
                     shkzg = ls_bsad-shkzg
                     dmbtr = ls_bsad-dmbtr
                     pswbt = ls_bsad-pswbt
                     vbeln = ls_bsad-belnr
                     bldat = ls_bsad-bldat
                     xblnr = ls_bsad-xblnr
                     sgtxt = ls_bsad-sgtxt   ).

    IF ls_bsad-xblnr+0(1) = '5'.
      CONCATENATE '000' ls_bsad-xblnr INTO itab-jobnumb.
    ENDIF.
    IF ls_bsad-belnr BETWEEN '0095000000' AND
                             '0095999999' AND
       bsad-bschl = '11'.
      itab-budat = ls_bsad-zfbdt.
    ELSE.
      " Discount Days
      IF NOT ls_bsad-zbd2t IS INITIAL.
        itab-budat = ls_bsad-zfbdt + ls_bsad-zbd2t.
      ELSE.
        itab-budat = ls_bsad-zfbdt + ls_bsad-zbd1t.
      ENDIF.
    ENDIF.

    READ TABLE lt_bsad1 INTO DATA(ls_bsad1)
                        WITH KEY belnr = ls_bsad-vbeln
                        BINARY SEARCH.
    IF sy-subrc = 0.
      IF ls_bsad-vbeln BETWEEN '0095000000' AND
                               '0095999999' AND
          ls_bsad1-bschl = '11'.
        itab-budat = ls_bsad1-zfbdt.
      ELSE.
        " Discount Days
        IF NOT bsad-zbd2t IS INITIAL.
          itab-budat = ls_bsad1-zfbdt + ls_bsad1-zbd2t.
        ELSE.
          itab-budat = ls_bsad1-zfbdt + ls_bsad1-zbd1t.
        ENDIF.
      ENDIF.
    ENDIF.

    itab-days = ( itab-budat - keydate ) * -1.
    IF itab-shkzg = 'H'.
      itab-dmbtr = ( itab-dmbtr * -1 ).
      itab-pswbt = ( itab-pswbt * -1 ).
    ENDIF.
    APPEND itab.
    CLEAR: bsad, itab, vbrk.

  ENDLOOP.

ENDIF.

SORT itab[] BY kunnr.

SELECT kunnr,
       klimk,
       skfor,
       erdat,
       ctlpc,
       crblb,
       sbgrp,
       kraus,
       revdb,
       cashd,
       casha,
       dbmon
  FROM knkk
  INTO TABLE @DATA(lt_knkk)
  FOR ALL ENTRIES IN @itab
  WHERE kunnr = @itab-kunnr AND
        kkber = 'BP01' AND
        ctlpc IN @ctlpc AND
        sbgrp IN @sbgrp.
IF sy-subrc = 0.
  SORT: lt_knkk BY kunnr.
ENDIF.

***** GET RISK CAT, CUST REP AND CHECK NEW CUSTOMER
LOOP AT itab ASSIGNING FIELD-SYMBOL(<fs_itab>).

  READ TABLE lt_knkk INTO DATA(ls_knkk)
                     WITH KEY kunnr = itab-kunnr
                     BINARY SEARCH.
  IF sy-subrc = 0 AND
    ls_knkk-cashd NOT BETWEEN date AND sy-datum AND
***** IF WANT ONLY NEW CUSTOMERS, DELETE OTHERS
    <fs_itab>-new <> abap_true.
    IF ( ls_knkk-crblb = abap_true AND
***** if blocked selection is chosen, get rid of blocked customers
         blocked = abap_true ) .
      CLEAR: <fs_itab>,
             ls_knkk.
      CONTINUE.
    ENDIF.
    <fs_itab>-crblb = ls_knkk-crblb.
    <fs_itab>-ctlpc = ls_knkk-ctlpc.
    <fs_itab>-sbgrp = ls_knkk-sbgrp.
    <fs_itab>-kraus = ls_knkk-kraus.
    <fs_itab>-revdb = ls_knkk-revdb.
    <fs_itab>-zcredit_exp = ls_knkk-klimk - ls_knkk-skfor.

    IF ls_knkk-dbmon = '00000000'.
      <fs_itab>-dbmon = ls_knkk-erdat.
    ELSE.
      <fs_itab>-dbmon = ls_knkk-dbmon.
    ENDIF.

    <fs_itab>-lastpayd = ls_knkk-cashd.

    WRITE ls_knkk-casha TO <fs_itab>-lastpaya.

    IF ls_knkk-cashd NOT BETWEEN date AND sy-datum.
      <fs_itab>-new = 'Y'.
    ELSE.
      <fs_itab>-new = 'N'.
    ENDIF.
  ELSE.
    CLEAR <fs_itab>.
  ENDIF.
  CLEAR: knkk, itab, knvv.
ENDLOOP.

IF <fs_itab> IS ASSIGNED.
  UNASSIGN <fs_itab>.
ENDIF.

DELETE itab WHERE kunnr IS INITIAL AND
                  belnr IS INITIAL AND
                  zuonr IS INITIAL.

SORT itab[] BY kunnr.

SELECT kunnr,
       zterm
  FROM knvv
  INTO TABLE @DATA(lt_knvv)
 FOR ALL ENTRIES IN @itab
 WHERE kunnr = @itab-kunnr.
IF sy-subrc = 0.
  SORT: lt_knvv BY kunnr.
ENDIF.
*** pick up terms from knvv
LOOP AT itab ASSIGNING <fs_itab>.
  READ TABLE lt_knvv INTO DATA(ls_knvv)
                     WITH KEY kunnr = <fs_itab>-kunnr
                     BINARY SEARCH.
  IF sy-subrc = 0.
    <fs_itab>-zterm = ls_knvv-zterm.
  ENDIF.
  CLEAR: ls_knvv.
ENDLOOP.


itab2[] = itab[].
itab3[] = itab[].
* RV is main document type and logic is based on it
* Some documents will be posted without reference number
DELETE itab2 WHERE blart <> 'RV' .
DELETE itab3 WHERE blart = 'RV'.

SORT itab2 BY vbeln.
SORT itab BY vbeln.

SELECT kunnr,
       name1,
       regio,
       ktokd,
       zbonding_comp_1,
       zinfo_sheet_recd,
       znoticesent,
       zdatenoticesent
  FROM kna1
  INTO TABLE @DATA(lt_kna1)
  FOR ALL ENTRIES IN @itab2
  WHERE ( kunnr = @itab2-kunnr AND
          ktokd IN @ktokd ) OR
          kunnr = @itab2-jobnumb OR
          kunnr = @itab2-jobbond.
IF sy-subrc = 0.
  SORT: lt_kna1 BY kunnr.
ENDIF.

LOOP AT itab2 INTO wa_tab2.
  MOVE-CORRESPONDING wa_tab2 TO itabd.
  READ TABLE lt_kna1 INTO DATA(ls_kna1)
                     WITH KEY kunnr = itabd-kunnr
                     BINARY SEARCH.
  IF sy-subrc = 0 AND
     ls_kna1-ktokd IN ktokd.
  ELSE.
    CLEAR kna1.
    CONTINUE.
  ENDIF.
  CLEAR ls_kna1.

  READ TABLE lt_kna1 INTO ls_kna1
                     WITH KEY kunnr = itabd-jobnumb
                     BINARY SEARCH.
  IF sy-subrc = 0.
    itabd-jobstate = ls_kna1-regio.
    itabd-jobbond = ls_kna1-zbonding_comp_1.
    itabd-zinfo_sheet_recd = ls_kna1-zinfo_sheet_recd.
    itabd-znoticesent = ls_kna1-znoticesent.
    itabd-zdatenoticesent = ls_kna1-zdatenoticesent.
    itabd-jobname = ls_kna1-name1.
  ENDIF.

  CLEAR ls_kna1.
  READ TABLE lt_kna1 INTO ls_kna1
                     WITH KEY kunnr = itabd-jobbond
                     BINARY SEARCH.
  IF sy-subrc = 0.
    itabd-jobbondn = ls_kna1-name1.
  ENDIF.
  IF wa_tab2-vbeln IS NOT INITIAL.
    LOOP AT itab3 ASSIGNING FIELD-SYMBOL(<fs_itab3>) WHERE rebzg = wa_tab2-vbeln.
      wa_tab2-dmbtr = wa_tab2-dmbtr + <fs_itab3>-dmbtr.
      CLEAR <fs_itab3>.
    ENDLOOP.
  ENDIF.

  IF wa_tab2-days <= 0.
    MOVE wa_tab2-dmbtr TO itabd-col1.
  ENDIF.

  IF wa_tab2-days BETWEEN 1 AND 15.
    MOVE wa_tab2-dmbtr TO itabd-col2a.
    MOVE wa_tab2-days TO itabd-days.
  ENDIF.

  IF wa_tab2-days BETWEEN 16 AND 30.
    MOVE wa_tab2-dmbtr TO itabd-col2b.
    MOVE wa_tab2-days TO itabd-days.
  ENDIF.

  IF wa_tab2-days > 30.
    MOVE wa_tab2-dmbtr TO itabd-col2c.
    MOVE wa_tab2-days TO itabd-days.
  ENDIF.

  IF wa_tab2-days BETWEEN 1 AND 30.
    MOVE wa_tab2-dmbtr TO itabd-col2.
    MOVE wa_tab2-days TO itabd-days.
  ENDIF.

  IF wa_tab2-days BETWEEN 31 AND 60.
    MOVE wa_tab2-dmbtr TO itabd-col3.
    MOVE wa_tab2-days TO itabd-days.
  ENDIF.

  IF wa_tab2-days > 60.
    MOVE wa_tab2-dmbtr TO itabd-col3a.
    MOVE wa_tab2-days TO itabd-days.
  ENDIF.

  IF wa_tab2-days > 90.
    MOVE wa_tab2-days TO itabd-days.
    MOVE wa_tab2-dmbtr TO itabd-col5a.
  ENDIF.

  IF wa_tab2-days BETWEEN 61 AND 90.
    MOVE wa_tab2-days TO itabd-days.
    MOVE wa_tab2-dmbtr TO itabd-col4.
  ENDIF.

  IF wa_tab2-days BETWEEN 91 AND 120.
    MOVE wa_tab2-days TO itabd-days.
    MOVE wa_tab2-dmbtr TO itabd-col5.
  ENDIF.

  IF wa_tab2-days > 120.
    MOVE wa_tab2-days TO itabd-days.
    MOVE wa_tab2-dmbtr TO itabd-col6.
  ENDIF.

  45days = sy-datum - 45.
  30days = sy-datum - 31.

  IF wa_tab2-lastpayd < 45days.
    itabd-nopay = 'Y'.
  ENDIF.

  IF wa_tab2-blart = 'RV' AND
     wa_tab2-bschl = '01'.
    IF wa_tab2-days   > 60.
      MOVE 'Y' TO itabd-over60.
    ENDIF.

    IF wa_tab2-bldat >= 30days.
      MOVE 'Y' TO itabd-last30.
    ENDIF.
  ENDIF.
  APPEND itabd.
  CLEAR: itabd, kna1.
ENDLOOP.

DELETE itab3[] WHERE belnr IS INITIAL.

itab_temp[] = itab3.


* Delete items with reference number
LOOP AT itab3 ASSIGNING <fs_itab3>.
  IF <fs_itab3>-belnr <> <fs_itab3>-rebzg AND
     <fs_itab3>-rebzg <> ' '.
    CLEAR <fs_itab3>-belnr.
  ENDIF.
ENDLOOP.
DELETE itab3[] WHERE belnr IS INITIAL.

* Delete item without reference number
LOOP AT itab_temp ASSIGNING FIELD-SYMBOL(<fs_temp>).
  IF <fs_temp>-belnr = <fs_temp>-rebzg OR
     <fs_temp>-rebzg = ' '.
    CLEAR <fs_temp>-belnr.
  ENDIF.
ENDLOOP.
DELETE itab_temp[] WHERE belnr IS INITIAL.

LOOP AT itab3 ASSIGNING <fs_itab3>.
  LOOP AT itab_temp ASSIGNING <fs_temp> WHERE kunnr = <fs_itab3>-kunnr
                                          AND rebzg = <fs_itab3>-belnr.
    <fs_itab3>-dmbtr = <fs_itab3>-dmbtr + <fs_temp>-dmbtr.
    CLEAR <fs_temp>-belnr.
  ENDLOOP.
ENDLOOP.
DELETE itab_temp WHERE belnr IS INITIAL.
APPEND LINES OF itab_temp TO itab3.

CLEAR: lt_kna1,
       ls_kna1.

SELECT kunnr,
       name1,
       regio,
       ktokd,
       zbonding_comp_1,
       zinfo_sheet_recd,
       znoticesent,
       zdatenoticesent
  FROM kna1
  INTO TABLE @lt_kna1
  FOR ALL ENTRIES IN @itab3
  WHERE ( kunnr = @itab3-kunnr AND
          ktokd IN @ktokd ) OR
          kunnr = @itab3-jobnumb OR
          kunnr = @itab3-jobbond.
IF sy-subrc = 0.
  SORT: lt_kna1 BY kunnr.
ENDIF.
* Process left over records with document type is not RV and with inv reference number
* also for reports other than item detail and dirty
SORT itab3[].
LOOP AT itab3 INTO wa_tab3.
  MOVE-CORRESPONDING wa_tab3 TO itabd.
  READ TABLE lt_kna1 INTO ls_kna1
                      WITH KEY kunnr = itabd-kunnr
                      BINARY SEARCH.
  IF sy-subrc IS NOT INITIAL OR
     ls_kna1-ktokd NOT IN ktokd.
    CLEAR ls_kna1.
    CONTINUE.
  ELSE.
    itabd-name1 = ls_kna1-name1.
  ENDIF.

  CLEAR ls_kna1.

  READ TABLE lt_kna1 INTO ls_kna1
                     WITH KEY kunnr = itabd-jobnumb
                     BINARY SEARCH.
  IF sy-subrc = 0.
    itabd-jobstate = ls_kna1-regio.
    itabd-jobbond = ls_kna1-zbonding_comp_1.
    itabd-zinfo_sheet_recd = ls_kna1-zinfo_sheet_recd.
    itabd-znoticesent = ls_kna1-znoticesent.
    itabd-zdatenoticesent = ls_kna1-zdatenoticesent.
    itabd-jobname = ls_kna1-name1.
  ENDIF.

  CLEAR ls_kna1.
  READ TABLE lt_kna1 INTO ls_kna1
                     WITH KEY kunnr = itabd-jobbond
                     BINARY SEARCH.
  IF sy-subrc = 0.
    itabd-jobbondn = ls_kna1-name1.
  ENDIF.

  IF wa_tab3-days <= 0.
    MOVE wa_tab3-dmbtr TO itabd-col1.
  ENDIF.

  IF wa_tab3-days BETWEEN 1 AND 15.
    MOVE wa_tab3-dmbtr TO itabd-col2a.
    MOVE wa_tab3-days TO itabd-days.
  ENDIF.

  IF wa_tab3-days BETWEEN 16 AND 30.
    MOVE wa_tab3-dmbtr TO itabd-col2b.
    MOVE wa_tab3-days TO itabd-days.
  ENDIF.

  IF wa_tab3-days BETWEEN 1 AND 30.
    MOVE wa_tab3-dmbtr TO itabd-col2.
    MOVE wa_tab3-days TO itabd-days.
  ENDIF.

  IF wa_tab3-days > 30.
    MOVE wa_tab3-dmbtr TO itabd-col2c.
    MOVE wa_tab3-days TO itabd-days.
  ENDIF.

  IF wa_tab3-days BETWEEN 31 AND 60.
    MOVE wa_tab3-dmbtr TO itabd-col3.
    MOVE wa_tab3-days TO itabd-days.
  ENDIF.

  IF wa_tab3-days > 60.
    MOVE wa_tab3-dmbtr TO itabd-col3a.
    MOVE wa_tab3-days TO itabd-days.
  ENDIF.

  IF wa_tab3-days > 90.
    MOVE wa_tab3-days TO itabd-days.
    MOVE wa_tab3-dmbtr TO itabd-col5a.
  ENDIF.

  IF wa_tab3-days BETWEEN 61 AND 90.
    MOVE wa_tab3-days TO itabd-days.
    MOVE wa_tab3-dmbtr TO itabd-col4.
  ENDIF.

  IF wa_tab3-days BETWEEN 91 AND 120.
    MOVE wa_tab3-days TO itabd-days.
    MOVE wa_tab3-dmbtr TO itabd-col5.
  ENDIF.

  IF wa_tab3-days > 120.
    MOVE wa_tab3-days TO itabd-days.
    MOVE wa_tab3-dmbtr TO itabd-col6.
  ENDIF.

  45days = sy-datum - 45.
  30days = sy-datum - 31.

  IF wa_tab3-lastpayd < 45days.
    itabd-nopay = 'Y'.
  ENDIF.

  IF wa_tab3-blart = 'RV' AND
     wa_tab3-bschl = '01'.
    IF wa_tab3-days   > 60.
      MOVE 'Y' TO itabd-over60.
    ENDIF.

    IF wa_tab3-bldat >= 30days.
      MOVE 'Y' TO itabd-last30.
    ENDIF.
  ENDIF.

  APPEND itabd.
  CLEAR: itabd, ls_kna1.
ENDLOOP.

IF report = 'D' OR
   report = 'G' OR
   report = 'H'.
  IF shipto[] IS NOT INITIAL.
    DELETE itabd[] WHERE jobnumb NOT IN shipto.
  ENDIF.
ENDIF.

LOOP AT itabd ASSIGNING FIELD-SYMBOL(<fs_itabd>).
  <fs_itabd>-sum = <fs_itabd>-col1 + <fs_itabd>-col2 + <fs_itabd>-col3 + <fs_itabd>-col4 + <fs_itabd>-col5 + <fs_itabd>-col6.
ENDLOOP.

IF <fs_itabd> IS ASSIGNED.
  UNASSIGN <fs_itabd>.
ENDIF.

LOOP AT itabd.
  MOVE-CORRESPONDING itabd TO itabh.
  CLEAR itabh-over60.
  CLEAR itabh-last30.
  COLLECT itabh.
  CLEAR: itabd, itabh.
ENDLOOP.

LOOP AT itabh ASSIGNING FIELD-SYMBOL(<Fs_itabh>).
  READ TABLE itabd WITH KEY kunnr = <Fs_itabh>-kunnr
                        over60 = 'Y'.
  IF sy-subrc = 0.
    <Fs_itabh>-over60 = 'Y'.
  ENDIF.
  CLEAR: itabd.

  READ TABLE itabh WITH KEY kunnr = <Fs_itabh>-kunnr
                         last30 = 'Y'.
  IF sy-subrc = 0.
    <Fs_itabh>-last30 = 'Y'.
  ENDIF.
  CLEAR: itabd.
ENDLOOP.

IF reasoncode NE ' '.
  IF report = 'A' OR      " Header All
     report = 'I' OR      " Header Dirty
     report = 'J'.        " Header Clean

    " Sort and Assign the ITAB values to local internal table LT_ITAB
    SORT itab[].
    lt_itab[] = itab[].
    SORT lt_itab[] BY kunnr rebzg.

    " Summing the values(DMBTR) using the Accounting Doc Number(BELNR) and
    "   comparing with Invoice Ref Number(REBZG)
    LOOP AT itab ASSIGNING <fs_itab>.
      lv_index = sy-tabix.
      READ TABLE lt_itab TRANSPORTING NO FIELDS
        WITH KEY kunnr = <fs_itab>-kunnr
                 rebzg = <fs_itab>-belnr BINARY SEARCH.

      CHECK sy-subrc EQ 0.

      LOOP AT lt_itab ASSIGNING FIELD-SYMBOL(<fs_itab1>) FROM sy-tabix. "WHERE rebzg = itab-belnr.
        IF <fs_itab1>-rebzg = <fs_itab>-belnr.
          itab-dmbtr = <fs_itab1>-dmbtr + <fs_itab>-dmbtr.
        ENDIF.
      ENDLOOP.
      CLEAR: lv_index.
    ENDLOOP.

    " Unassign Field Symbol
    IF <fs_itab> IS ASSIGNED.
      UNASSIGN <fs_itab>.
    ENDIF.

    SORT itab[].
    " Delete the Intenral table records using the Invoice Ref Number(REBZG)
    "   comparing with the Accounting Doc Number(BELNR)
    LOOP AT itab ASSIGNING <fs_itab>.
      IF NOT line_exists( lt_itab[ kunnr = itab-kunnr
                                   rebzg = itab-belnr ] ).
        CONTINUE.
      ENDIF.

      LOOP AT lt_itab ASSIGNING <fs_itab1> FROM sy-tabix.
        IF <fs_itab1>-rebzg = <fs_itab>-belnr AND
           <fs_itab1>-kunnr = <fs_itab>-kunnr AND
           <fs_itab1>-sbgrp = <fs_itab>-sbgrp.
          IF <fs_itab>-kunnr EQ <fs_itab1>-kunnr AND
             <fs_itab>-belnr EQ <fs_itab1>-belnr.
            CLEAR: <fs_itab>.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    DELETE itab WHERE kunnr IS INITIAL AND belnr IS INITIAL.

    SORT itab[].
    CLEAR: itabd[], itabh[], itab.

    SELECT kunnr,
           name1
      FROM kna1
      INTO TABLE @DATA(lt_name1)
      FOR ALL ENTRIES IN @itab
      WHERE kunnr = @itab-kunnr AND
            ktokd IN @ktokd.
    IF sy-subrc = 0.
      SORT: lt_name1 BY kunnr.
    ENDIF.

    LOOP AT itab.
      MOVE-CORRESPONDING itab TO itabd.
      READ TABLE lt_name1 INTO DATA(ls_name1)
                          WITH KEY kunnr = itabd-kunnr
                          BINARY SEARCH.
      IF sy-subrc IS NOT INITIAL.
        CLEAR ls_name1.
        CONTINUE.
      ELSE.
        itabd-name1 = ls_name1-name1.
      ENDIF.

      IF itab-days <= 0.
        MOVE itab-dmbtr TO itabd-col1.
      ENDIF.

      IF itab-days BETWEEN 1 AND 15.
        MOVE itab-dmbtr TO itabd-col2a.
        MOVE itab-days TO itabd-days.
      ENDIF.

      IF itab-days BETWEEN 16 AND 30.
        MOVE itab-dmbtr TO itabd-col2b.
        MOVE itab-days TO itabd-days.
      ENDIF.

      IF itab-days BETWEEN 1 AND 30.
        MOVE itab-dmbtr TO itabd-col2.
        MOVE itab-days TO itabd-days.
      ENDIF.

      IF itab-days > 30.
        MOVE itab-dmbtr TO itabd-col2c.
        MOVE itab-days TO itabd-days.
      ENDIF.

      IF itab-days BETWEEN 31 AND 60.
        MOVE itab-dmbtr TO itabd-col3.
        MOVE itab-days TO itabd-days.
      ENDIF.

      IF itab-days > 60.
        MOVE itab-dmbtr TO itabd-col3a.
        MOVE itab-days TO itabd-days.
      ENDIF.

      IF itab-days BETWEEN 61 AND 90.
        MOVE itab-days TO itabd-days.
        MOVE itab-dmbtr TO itabd-col4.
      ENDIF.

      IF itab-days BETWEEN 91 AND 120.
        MOVE itab-days TO itabd-days.
        MOVE itab-dmbtr TO itabd-col5.
      ENDIF.

      IF itab-days > 90.
        MOVE itab-days TO itabd-days.
        MOVE itab-dmbtr TO itabd-col5a.
      ENDIF.

      IF itab-days > 120.
        MOVE itab-days TO itabd-days.
        MOVE itab-dmbtr TO itabd-col6.
      ENDIF.

      45days = sy-datum - 45.
      30days = sy-datum - 31.

      IF itab-lastpayd < 45days.
        itabd-nopay = 'Y'.
      ENDIF.

      IF itab-blart = 'RV' AND
         itab-bschl = '01'.
        IF itab-days   > 60.
          MOVE 'Y' TO itabd-over60.
        ENDIF.

        IF itab-bldat >= 30days.
          MOVE 'Y' TO itabd-last30.
        ENDIF.
      ENDIF.

      APPEND itabd.
      CLEAR: itabd, kna1.
    ENDLOOP.

    SORT itabd[].
    LOOP AT itabd ASSIGNING <Fs_itabd>.
      <Fs_itabd>-sum = <Fs_itabd>-col1 + <Fs_itabd>-col2 + <Fs_itabd>-col3 + <Fs_itabd>-col4 + <Fs_itabd>-col5 + <Fs_itabd>-col6.
    ENDLOOP.

    LOOP AT itabd.
      MOVE-CORRESPONDING itabd TO itabh.
      CLEAR itabh-over60.
      CLEAR itabh-last30.
      COLLECT itabh.
      CLEAR: itabd, itabh.
    ENDLOOP.

    LOOP AT itabh ASSIGNING <fs_itabh>.
      READ TABLE itabd WITH KEY kunnr = <fs_itabh>-kunnr
                                over60 = 'Y'.
      IF sy-subrc = 0.
        <fs_itabh>-over60 = 'Y'.
      ENDIF.
      CLEAR: itabd.

      READ TABLE itabh WITH KEY kunnr = <fs_itabh>-kunnr
                                last30 = 'Y'.
      IF sy-subrc = 0.
        <fs_itabh>-last30 = 'Y'.
      ENDIF.
      CLEAR: itabh, itabd.
    ENDLOOP.

    CLEAR: lt_itab[].
  ENDIF.
ENDIF.

IF zero = 'X'.
  DELETE itabh[] WHERE col2 = 0 AND
                       col3 = 0 AND
                       col4 = 0 AND
                       col5 = 0 AND
                       col6 = 0.
ENDIF.

SELECT kunnr,
       klimk
  FROM knkk
  INTO TABLE @DATA(lt_knkk1)
  FOR ALL ENTRIES IN @itabh
     WHERE kunnr = @itabh-kunnr AND
           kkber = 'BP01'.
IF sy-subrc = 0.
  SORT lt_knkk1 BY kunnr.
ENDIF.

SELECT kunnr
  FROM knvv
  INTO TABLE @DATA(lt_knvv1)
  FOR ALL ENTRIES IN @itabh
 WHERE kunnr = @itabh-kunnr.
IF sy-subrc = 0.
  SORT: lt_knvv1 BY kunnr.
ENDIF.
" Credit Limit Logic
LOOP AT itabh ASSIGNING <fs_itabh>.

  READ TABLE lt_knkk1 INTO DATA(ls_knkk1)
                      WITH KEY kunnr = <fs_itabh>-kunnr
                      BINARY SEARCH.
  IF sy-subrc = 0.
    <fs_itabh>-klimk = ls_knkk1-klimk.
  ENDIF.

  IF line_exists( lt_knvv1[ kunnr = <Fs_itabh>-kunnr ] ).
    IF <fs_itabh>-klimk < <fs_itabh>-sum.
      sum2 = <fs_itabh>-klimk - <fs_itabh>-sum.
      IF sum2 <> 0 AND <fs_itabh>-klimk <> 0.
        <Fs_itabh>-percover = ( sum2 / <Fs_itabh>-klimk ) * 100.
        IF <Fs_itabh>-percover < 0.
          <Fs_itabh>-percover = <Fs_itabh>-percover * -1.
        ENDIF.
      ENDIF.
    ENDIF.
  ELSE.
    CLEAR: <fs_itabh>.
  ENDIF.
  CLEAR: ls_knkk1,
         sum2.
ENDLOOP.

DELETE itabh WHERE table_line IS INITIAL.

SORT itabh BY kunnr.

" Last Invoice Date
IF itabh[] IS NOT INITIAL.
  lv_date_prev_yr = sy-datum - 365.
  SELECT kunde,
         fkdat
    FROM vrkpa
    INTO TABLE @DATA(lt_inv_dates)
    FOR ALL ENTRIES IN @itabh
    WHERE kunde = @itabh-kunnr
      AND vbtyp = 'M'
      AND fkdat > @lv_date_prev_yr.
  IF sy-subrc = 0.
    SORT lt_inv_dates BY kunde ASCENDING fkdat DESCENDING.
    LOOP AT itabh ASSIGNING <fs_itabh>.
      READ TABLE lt_inv_dates ASSIGNING FIELD-SYMBOL(<fs_inv_dates>) WITH KEY kunde = <fs_itabh>-kunnr.
      IF sy-subrc = 0 AND <fs_inv_dates> IS ASSIGNED.
        <fs_itabh>-last_inv_date = <fs_inv_dates>-fkdat.
      ENDIF.
      <Fs_itabh>-kunnr = |{ <fs_itabh>-kunnr ALPHA = IN }|.
    ENDLOOP.
  ENDIF.
ENDIF.

" Logic to add the Credit Limit in the Detail Reports
SORT itabd[].
SORT itabh[] BY kunnr.
LOOP AT itabd ASSIGNING <fs_itabd>.
  <fs_itabd>-kunnr = |{ <fs_itabd>-kunnr ALPHA = OUT }|.
  READ TABLE itabh[] INTO DATA(ls_itabh)
    WITH KEY kunnr = <fs_itabd>-kunnr BINARY SEARCH.
  IF sy-subrc EQ 0.
    <fs_itabd>-klimk = ls_itabh-klimk.
  ENDIF.
ENDLOOP.
*&---------------------------------------------------------------------*
*& Form reasoncode_y
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM reasoncode_y .

  SORT lt_itab[] BY kunnr rebzg.

  LOOP AT itab.
    READ TABLE lt_itab TRANSPORTING NO FIELDS
      WITH KEY kunnr = itab-kunnr
               rebzg = itab-belnr BINARY SEARCH.
    IF sy-subrc = 0.
      LOOP AT lt_itab ASSIGNING FIELD-SYMBOL(<fs_itab>) FROM sy-tabix.
        IF <fs_itab>-rebzg = itab-belnr.
          IF NOT itab-rstgr IS INITIAL.
            <fs_itab>-rstgr = itab-rstgr.
            <fs_itab>-txt40 = itab-txt40.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDLOOP.

  " Unassign Field Symbol
  IF <fs_itab> IS ASSIGNED.
    UNASSIGN <fs_itab>.
  ENDIF.

  " Sort the LT_ITAB based on the BELNR field value
  SORT lt_itab[] BY kunnr belnr.

  LOOP AT itab.
    READ TABLE lt_itab ASSIGNING <fs_itab>
      WITH KEY kunnr = itab-kunnr
               belnr = itab-rebzg BINARY SEARCH.
    IF sy-subrc EQ 0.
      IF NOT itab-rstgr IS INITIAL.
        <fs_itab>-rstgr = itab-rstgr.
        <fs_itab>-txt40 = itab-txt40.
      ENDIF.
    ENDIF.
  ENDLOOP.

  CLEAR: itab[].
  itab[] = lt_itab[].

  LOOP AT itab ASSIGNING <Fs_itab>.
    IF <fs_itab>-rstgr <> ' '.
      MOVE <fs_itab>-rstgr TO reason-rstgr.
      MOVE <fs_itab>-vbeln TO reason-vbeln.
      MOVE <fs_itab>-txt40 TO reason-txt40.
      COLLECT reason.
      IF <fs_itab>-vbeln IS NOT INITIAL.
        <fs_itab>-rstgr = reason-rstgr.
        <fs_itab>-txt40 = reason-txt40.
      ENDIF.
    ENDIF.

    CASE report.
      WHEN 'B'.                            "deductions only (dirty)
        IF NOT line_exists( lt_dirty_clean_codes[ name = 'Z_AR_DIRTY_REASONCODES'
                                                   low = itab-rstgr ] ).
          CLEAR: <fs_itab>.
        ENDIF.
      WHEN 'C'.                            "no deductions (clean)
        IF NOT line_exists( lt_dirty_clean_codes[ name = 'Z_AR_CLEAN_REASONCODES'
                                                   low = itab-rstgr ] ).
          CLEAR: <fs_itab>.
        ENDIF.
      WHEN 'G'.                            "deductions only (dirty)
        IF NOT line_exists( lt_dirty_clean_codes[ name = 'Z_AR_DIRTY_REASONCODES'
                                                   low = itab-rstgr ] ).
          CLEAR: <fs_itab>.
        ENDIF.
      WHEN 'H'.                            "no deductions (clean)
        IF NOT line_exists( lt_dirty_clean_codes[ name = 'Z_AR_CLEAN_REASONCODES'
                                                   low = itab-rstgr ] ).
          CLEAR: <fs_itab>.
        ENDIF.
      WHEN 'I'.                            "deductions only (dirty)
        IF NOT line_exists( lt_dirty_clean_codes[ name = 'Z_AR_DIRTY_REASONCODES'
                                                   low = itab-rstgr ] ).
          CLEAR: <fs_itab>.
        ENDIF.
      WHEN 'J'.                            "no deductions (clean)
        IF NOT line_exists( lt_dirty_clean_codes[ name = 'Z_AR_CLEAN_REASONCODES'
                                                   low = itab-rstgr ] ).
          CLEAR: <fs_itab>.
        ENDIF.
    ENDCASE.
    CLEAR: reason.
  ENDLOOP.

  DELETE itab WHERE kunnr IS INITIAL AND
                    belnr IS INITIAL AND
                    zuonr IS INITIAL.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form reasoncode_x
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM reasoncode_x .
  IF report = 'A' OR      " Header All
     report = 'I' OR      " Header Dirty
     report = 'J'.        " Header Clean

    SORT lt_itab[] BY kunnr rebzg.

    LOOP AT itab.
      READ TABLE lt_itab TRANSPORTING NO FIELDS
        WITH KEY kunnr = itab-kunnr
                 rebzg = itab-belnr BINARY SEARCH.
      IF sy-subrc = 0.
        LOOP AT lt_itab ASSIGNING FIELD-SYMBOL(<fs_itab>) FROM sy-tabix.
          IF <fs_itab>-rebzg = itab-belnr.
            IF NOT itab-rstgr IS INITIAL.
              <fs_itab>-rstgr = itab-rstgr.
              <fs_itab>-txt40 = itab-txt40.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDLOOP.

    " Unassign Field Symbol
    IF <fs_itab> IS ASSIGNED.
      UNASSIGN <fs_itab>.
    ENDIF.

    " Sort the LT_ITAB based on the BELNR field value
    SORT lt_itab[] BY kunnr belnr.

    LOOP AT itab.
      READ TABLE lt_itab ASSIGNING <fs_itab>
        WITH KEY kunnr = itab-kunnr
                 belnr = itab-rebzg BINARY SEARCH.
      IF sy-subrc EQ 0.
        IF NOT itab-rstgr IS INITIAL.
          <fs_itab>-rstgr = itab-rstgr.
          <fs_itab>-txt40 = itab-txt40.
        ENDIF.
      ENDIF.
    ENDLOOP.
    CLEAR: itab[].
    itab[] = lt_itab[].
  ENDIF.

  LOOP AT itab ASSIGNING <Fs_itab>.
    IF <fs_itab>-rstgr <> ' '.
      MOVE <fs_itab>-rstgr TO reason-rstgr.
      MOVE <fs_itab>-vbeln TO reason-vbeln.
      MOVE <fs_itab>-txt40 TO reason-txt40.
      COLLECT reason.
      IF <fs_itab>-vbeln IS NOT INITIAL.
        <fs_itab>-rstgr = reason-rstgr.
        <fs_itab>-txt40 = reason-txt40.
      ENDIF.
    ENDIF.

    CASE report.
      WHEN 'C'.                            "no deductions (clean)
        IF NOT line_exists( lt_dirty_clean_codes[ name = 'Z_AR_CLEAN_REASONCODES'
                                                   low = itab-rstgr ] ).
          CLEAR: <fs_itab>.
        ENDIF.
      WHEN 'J'.                            "no deductions (clean)
        IF NOT line_exists( lt_dirty_clean_codes[ name = 'Z_AR_CLEAN_REASONCODES'
                                                           low = itab-rstgr ] ).
          CLEAR: <fs_itab>.
        ENDIF.
    ENDCASE.
  ENDLOOP.

  DELETE itab WHERE kunnr IS INITIAL AND
                    belnr IS INITIAL AND
                    zuonr IS INITIAL.
ENDFORM.
